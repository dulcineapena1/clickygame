{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","start","id","alt","src","image","Wrapper","style","children","Title","mensajeNoAcerto","score","topscore","App","state","friends","friendsALosQueLeDiClick","scoregeneral","scoreMasAlto","mensaje","cambio","background","opacity","nuevoScoreAlto","_this","setState","includes","_this2","this","components_Wrapper_Wrapper","components_Title_Title","map","friend","sort","Math","random","value","b","components_FriendCard_FriendCard","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"wgDAaeA,SAVI,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,QAAS,kBAAML,EAAMM,MAAMN,EAAMO,MAC9DN,EAAAC,EAAAC,cAAA,OAAKK,IAAI,GAAGC,IAAKT,EAAMU,YCFdC,SAFC,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKS,MAAOZ,EAAMY,MAAOR,UAAU,WAAWJ,EAAMa,YCW9DC,SAXD,SAAAd,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDAEXH,EAAAC,EAAAC,cAAA,SAAIH,EAAMe,iBACVd,EAAAC,EAAAC,cAAA,mBAAWH,EAAMgB,OACjBf,EAAAC,EAAAC,cAAA,uBAAeH,EAAMiB,oBC2DdC,oNAzDbC,MAAQ,CACNC,UACAC,wBAAyB,CAAC,GAC1BC,aAAa,EACbC,aAAa,EACbC,QAAQ,GACRC,OAAQ,CAAEC,WAAY,OAAQC,QAAQ,OAGxCrB,MAAQ,SAAAC,GAEN,IAAIqB,EAAgBC,EAAKV,MAAMI,aACaK,EAA5CC,EAAKV,MAAMG,cAAgBM,EAAiCC,EAAKV,MAAMI,aAAa,EAAmBK,EAGvGC,EAAKC,SAAS,CAAET,wBAAyBQ,EAAKV,MAAME,wBAA0Bd,IAG9DsB,EAAKV,MAAME,wBAAwBU,SAASxB,GACjDsB,EAAKC,SAAS,CAACL,OAAO,CAACC,WAAW,MAAMC,QAAQ,IAAMH,QAAQ,mBAAoBF,aAAe,EAAGD,wBAAwB,CAAC,GAAIE,aAAaM,EAAKV,MAAMI,eAAkBM,EAAKC,SAAS,SAACX,GAAY,MAAO,CAACK,QAAS,GAAIF,aAAeH,EAAMG,aAAc,EAAGC,aAAcK,EAAgBH,OAAO,CAACC,WAAW,OAAOC,QAAQ,+EASrU,IAAAK,EAAAC,KACP,OACEhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAStB,MAASqB,KAAKd,MAAMM,QAC3BxB,EAAAC,EAAAC,cAACgC,EAAD,CACEnB,MAAQiB,KAAKd,MAAMG,aACnBL,SAAWgB,KAAKd,MAAMI,aACtBR,gBAAkBkB,KAAKd,MAAMK,UAK9BS,KAAKd,MAAMC,QAAQgB,IAAI,SAACC,GAAD,MACtB,CAACC,KAAMC,KAAKC,SAAUC,MAAOJ,KAAUC,KACrC,SAACD,EAAOK,GAAR,OAAcL,EAAOC,KAAOI,EAAEJ,OAAOF,IAClC,SAAAC,GAAM,OACLpC,EAAAC,EAAAC,cAACwC,EAAD,CACAC,IAAKP,EAAOI,MAAMlC,GAClBD,MAAO0B,EAAK1B,MACZC,GAAI8B,EAAOI,MAAMlC,GACjBG,MAAO2B,EAAOI,MAAM/B,kBAjDlBmC,oBCHlBC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.40524749.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendCard.css\";\n\nconst FriendCard = props => (\n  <div className=\"card\">\n    {/* al dar click vas a ejecutar la prop.start y esta va a hacer uso del id para poder identificarla, por eso el id debe ser una prop */}\n    <div className=\"img-container\" onClick={() => props.start(props.id)}   >\n      <img alt=\"\" src={props.image} />\n    </div>\n   \n  </div>\n);\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div style={props.style} className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n// className=\"wrapper\"","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => \n    <nav className=\"navbar navbar-expand-lg navbar-light bg-blue\">\n        \n        <p>{props.mensajeNoAcerto}</p>\n        <p>Score: {props.score}</p>\n        <p>Top Score: {props.topscore}</p>\n        \n        {/* <p>relleno: {props.diclick}</p>    Con esto puedo saber a que id le doy click en app.js*/}\n        \n    </nav>;\n\nexport default Title;\n\n\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  // friens trae los elementos del archivo json (aquí arriba está en import)\n  state = {\n    friends,\n    friendsALosQueLeDiClick: [0],\n    scoregeneral:0,\n    scoreMasAlto:0,\n    mensaje:\"\",\n    cambio: { background: \"blue\", opacity:0.5} // son los estilos css que estaré cambiando según acierte o no\n  };\n\n  start = id => {\n    // Esto es para sacar el top score (scoreMasAlto) Enrealidad estoy metiendo a una variable normal un valor de un state\n    let nuevoScoreAlto= this.state.scoreMasAlto;\n    this.state.scoregeneral >= nuevoScoreAlto ? nuevoScoreAlto= this.state.scoreMasAlto+1 : nuevoScoreAlto=nuevoScoreAlto\n\n    //Aquí almaceno los id a los que se le dio click\n    this.setState({ friendsALosQueLeDiClick: this.state.friendsALosQueLeDiClick + id });\n    \n    // Si el id clickeado está en la variable que almacena los clickados, entonces setea scores\n    const friendly= this.state.friendsALosQueLeDiClick.includes(id);\n    friendly ? this.setState({cambio:{background:\"red\",opacity:0.5}, mensaje:\"Wrong! Try Again\", scoregeneral : 0, friendsALosQueLeDiClick:[0], scoreMasAlto:this.state.scoreMasAlto})  : this.setState((state) => { return {mensaje: \"\", scoregeneral : state.scoregeneral +1, scoreMasAlto: nuevoScoreAlto, cambio:{background:\"blue\",opacity:1}}  })\n    // Pasando un state como prop, en el return primero solo dice el nombre del state envez de this.state.scoreMasAlto, porque ya se lo estás pasando como prop    \n   \n  };\n  \n \n \n  \n\n  render() {\n    return (\n      <Wrapper style = {this.state.cambio}>\n        <Title\n          score= {this.state.scoregeneral}\n          topscore= {this.state.scoreMasAlto}\n          mensajeNoAcerto= {this.state.mensaje}\n         // diclick= {this.state.friendsALosQueLeDiClick}    Con esto puedo saber a que id le estoy dando click\n        />\n\n        {/* // Primero mapeamos el json de friend y luego le damos el valor mathrandom al friend, y luego hacemos que acomode los elementos y al final mapeamos metiendo el efecto random */}\n        {this.state.friends.map((friend) => (\n          {sort: Math.random(), value: friend})).sort(\n            (friend,b) => friend.sort - b.sort ).map(\n              (friend => (\n                <FriendCard\n                key={friend.value.id} // value es porque en el primer map estamos poniendo que el value es lo que trae el random\n                start={this.start}\n                id={friend.value.id}\n                image={friend.value.image} //image=.. etc, son palabras del json. friend.image es la imagen que está adentro del json, friend solito es el argumento de este map              \n                />)\n              )\n            )\n        }  \n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n\n {/* este código de abajo EXPLICA el funcionamiento de map + sort randomly usado arriba */}\n        {/* let shuffled = unshuffled\n        .map((a) => ({sort: Math.random(), value: a}))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => a.value) */}\n\n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}